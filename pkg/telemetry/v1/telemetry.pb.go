// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v4.25.1
// source: pkg/telemetry/v1/telemetry.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EventType represents different types of connection events
type EventType int32

const (
	EventType_EVENT_TYPE_UNSPECIFIED EventType = 0
	EventType_EVENT_TYPE_TCP_NEW     EventType = 1
	EventType_EVENT_TYPE_TCP_UPDATE  EventType = 2
	EventType_EVENT_TYPE_TCP_CLOSE   EventType = 3
	EventType_EVENT_TYPE_UDP_NEW     EventType = 4
	EventType_EVENT_TYPE_UDP_UPDATE  EventType = 5
	EventType_EVENT_TYPE_UDP_CLOSE   EventType = 6
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "EVENT_TYPE_UNSPECIFIED",
		1: "EVENT_TYPE_TCP_NEW",
		2: "EVENT_TYPE_TCP_UPDATE",
		3: "EVENT_TYPE_TCP_CLOSE",
		4: "EVENT_TYPE_UDP_NEW",
		5: "EVENT_TYPE_UDP_UPDATE",
		6: "EVENT_TYPE_UDP_CLOSE",
	}
	EventType_value = map[string]int32{
		"EVENT_TYPE_UNSPECIFIED": 0,
		"EVENT_TYPE_TCP_NEW":     1,
		"EVENT_TYPE_TCP_UPDATE":  2,
		"EVENT_TYPE_TCP_CLOSE":   3,
		"EVENT_TYPE_UDP_NEW":     4,
		"EVENT_TYPE_UDP_UPDATE":  5,
		"EVENT_TYPE_UDP_CLOSE":   6,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_telemetry_v1_telemetry_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_pkg_telemetry_v1_telemetry_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_telemetry_v1_telemetry_proto_rawDescGZIP(), []int{0}
}

// ConnectionEvent represents a network connection event
type ConnectionEvent struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	EventType EventType              `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=telemetry.v1.EventType" json:"event_type,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Connection Identity
	PodName     string `protobuf:"bytes,3,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	Namespace   string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ContainerId string `protobuf:"bytes,5,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	// Network Info
	Protocol int32  `protobuf:"varint,6,opt,name=protocol,proto3" json:"protocol,omitempty"`
	SrcIp    []byte `protobuf:"bytes,7,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	SrcPort  int32  `protobuf:"varint,8,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty"`
	DstIp    []byte `protobuf:"bytes,9,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	DstPort  int32  `protobuf:"varint,10,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`
	// TCP State
	TcpState    *int32 `protobuf:"varint,11,opt,name=tcp_state,json=tcpState,proto3,oneof" json:"tcp_state,omitempty"`
	Retransmits *int32 `protobuf:"varint,12,opt,name=retransmits,proto3,oneof" json:"retransmits,omitempty"`
	RttUsec     *int32 `protobuf:"varint,13,opt,name=rtt_usec,json=rttUsec,proto3,oneof" json:"rtt_usec,omitempty"`
	WindowSize  *int32 `protobuf:"varint,14,opt,name=window_size,json=windowSize,proto3,oneof" json:"window_size,omitempty"`
	// UDP State
	UdpRxDropped *int32 `protobuf:"varint,15,opt,name=udp_rx_dropped,json=udpRxDropped,proto3,oneof" json:"udp_rx_dropped,omitempty"`
	UdpTxDropped *int32 `protobuf:"varint,16,opt,name=udp_tx_dropped,json=udpTxDropped,proto3,oneof" json:"udp_tx_dropped,omitempty"`
	// Conntrack Info
	CtState  *int32 `protobuf:"varint,17,opt,name=ct_state,json=ctState,proto3,oneof" json:"ct_state,omitempty"`
	CtZone   *int32 `protobuf:"varint,18,opt,name=ct_zone,json=ctZone,proto3,oneof" json:"ct_zone,omitempty"`
	CtMark   *int32 `protobuf:"varint,19,opt,name=ct_mark,json=ctMark,proto3,oneof" json:"ct_mark,omitempty"`
	CtLabels []byte `protobuf:"bytes,20,opt,name=ct_labels,json=ctLabels,proto3" json:"ct_labels,omitempty"`
	NatIp    []byte `protobuf:"bytes,21,opt,name=nat_ip,json=natIp,proto3,oneof" json:"nat_ip,omitempty"`
	NatPort  *int32 `protobuf:"varint,22,opt,name=nat_port,json=natPort,proto3,oneof" json:"nat_port,omitempty"`
	// Metrics
	BytesIn    int64 `protobuf:"varint,23,opt,name=bytes_in,json=bytesIn,proto3" json:"bytes_in,omitempty"`
	BytesOut   int64 `protobuf:"varint,24,opt,name=bytes_out,json=bytesOut,proto3" json:"bytes_out,omitempty"`
	PacketsIn  int64 `protobuf:"varint,25,opt,name=packets_in,json=packetsIn,proto3" json:"packets_in,omitempty"`
	PacketsOut int64 `protobuf:"varint,26,opt,name=packets_out,json=packetsOut,proto3" json:"packets_out,omitempty"`
	// Timestamps
	StartTs       *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	LastSeen      *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectionEvent) Reset() {
	*x = ConnectionEvent{}
	mi := &file_pkg_telemetry_v1_telemetry_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionEvent) ProtoMessage() {}

func (x *ConnectionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_telemetry_v1_telemetry_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionEvent.ProtoReflect.Descriptor instead.
func (*ConnectionEvent) Descriptor() ([]byte, []int) {
	return file_pkg_telemetry_v1_telemetry_proto_rawDescGZIP(), []int{0}
}

func (x *ConnectionEvent) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_EVENT_TYPE_UNSPECIFIED
}

func (x *ConnectionEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ConnectionEvent) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *ConnectionEvent) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ConnectionEvent) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *ConnectionEvent) GetProtocol() int32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *ConnectionEvent) GetSrcIp() []byte {
	if x != nil {
		return x.SrcIp
	}
	return nil
}

func (x *ConnectionEvent) GetSrcPort() int32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *ConnectionEvent) GetDstIp() []byte {
	if x != nil {
		return x.DstIp
	}
	return nil
}

func (x *ConnectionEvent) GetDstPort() int32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *ConnectionEvent) GetTcpState() int32 {
	if x != nil && x.TcpState != nil {
		return *x.TcpState
	}
	return 0
}

func (x *ConnectionEvent) GetRetransmits() int32 {
	if x != nil && x.Retransmits != nil {
		return *x.Retransmits
	}
	return 0
}

func (x *ConnectionEvent) GetRttUsec() int32 {
	if x != nil && x.RttUsec != nil {
		return *x.RttUsec
	}
	return 0
}

func (x *ConnectionEvent) GetWindowSize() int32 {
	if x != nil && x.WindowSize != nil {
		return *x.WindowSize
	}
	return 0
}

func (x *ConnectionEvent) GetUdpRxDropped() int32 {
	if x != nil && x.UdpRxDropped != nil {
		return *x.UdpRxDropped
	}
	return 0
}

func (x *ConnectionEvent) GetUdpTxDropped() int32 {
	if x != nil && x.UdpTxDropped != nil {
		return *x.UdpTxDropped
	}
	return 0
}

func (x *ConnectionEvent) GetCtState() int32 {
	if x != nil && x.CtState != nil {
		return *x.CtState
	}
	return 0
}

func (x *ConnectionEvent) GetCtZone() int32 {
	if x != nil && x.CtZone != nil {
		return *x.CtZone
	}
	return 0
}

func (x *ConnectionEvent) GetCtMark() int32 {
	if x != nil && x.CtMark != nil {
		return *x.CtMark
	}
	return 0
}

func (x *ConnectionEvent) GetCtLabels() []byte {
	if x != nil {
		return x.CtLabels
	}
	return nil
}

func (x *ConnectionEvent) GetNatIp() []byte {
	if x != nil {
		return x.NatIp
	}
	return nil
}

func (x *ConnectionEvent) GetNatPort() int32 {
	if x != nil && x.NatPort != nil {
		return *x.NatPort
	}
	return 0
}

func (x *ConnectionEvent) GetBytesIn() int64 {
	if x != nil {
		return x.BytesIn
	}
	return 0
}

func (x *ConnectionEvent) GetBytesOut() int64 {
	if x != nil {
		return x.BytesOut
	}
	return 0
}

func (x *ConnectionEvent) GetPacketsIn() int64 {
	if x != nil {
		return x.PacketsIn
	}
	return 0
}

func (x *ConnectionEvent) GetPacketsOut() int64 {
	if x != nil {
		return x.PacketsOut
	}
	return 0
}

func (x *ConnectionEvent) GetStartTs() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTs
	}
	return nil
}

func (x *ConnectionEvent) GetLastSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

// StreamConnectionsRequest represents a request to stream connections
type StreamConnectionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	PodName       string                 `protobuf:"bytes,2,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	Protocol      int32                  `protobuf:"varint,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamConnectionsRequest) Reset() {
	*x = StreamConnectionsRequest{}
	mi := &file_pkg_telemetry_v1_telemetry_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamConnectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamConnectionsRequest) ProtoMessage() {}

func (x *StreamConnectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_telemetry_v1_telemetry_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamConnectionsRequest.ProtoReflect.Descriptor instead.
func (*StreamConnectionsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_telemetry_v1_telemetry_proto_rawDescGZIP(), []int{1}
}

func (x *StreamConnectionsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *StreamConnectionsRequest) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *StreamConnectionsRequest) GetProtocol() int32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

// ConnectionStatsRequest represents a request for connection statistics
type ConnectionStatsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	PodName       string                 `protobuf:"bytes,2,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectionStatsRequest) Reset() {
	*x = ConnectionStatsRequest{}
	mi := &file_pkg_telemetry_v1_telemetry_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionStatsRequest) ProtoMessage() {}

func (x *ConnectionStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_telemetry_v1_telemetry_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionStatsRequest.ProtoReflect.Descriptor instead.
func (*ConnectionStatsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_telemetry_v1_telemetry_proto_rawDescGZIP(), []int{2}
}

func (x *ConnectionStatsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ConnectionStatsRequest) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *ConnectionStatsRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ConnectionStatsRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

// ConnectionStats represents aggregated connection statistics
type ConnectionStats struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	BucketTime       *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=bucket_time,json=bucketTime,proto3" json:"bucket_time,omitempty"`
	TotalConnections int64                  `protobuf:"varint,2,opt,name=total_connections,json=totalConnections,proto3" json:"total_connections,omitempty"`
	TotalBytesIn     int64                  `protobuf:"varint,3,opt,name=total_bytes_in,json=totalBytesIn,proto3" json:"total_bytes_in,omitempty"`
	TotalBytesOut    int64                  `protobuf:"varint,4,opt,name=total_bytes_out,json=totalBytesOut,proto3" json:"total_bytes_out,omitempty"`
	TotalPacketsIn   int64                  `protobuf:"varint,5,opt,name=total_packets_in,json=totalPacketsIn,proto3" json:"total_packets_in,omitempty"`
	TotalPacketsOut  int64                  `protobuf:"varint,6,opt,name=total_packets_out,json=totalPacketsOut,proto3" json:"total_packets_out,omitempty"`
	TcpConnections   int32                  `protobuf:"varint,7,opt,name=tcp_connections,json=tcpConnections,proto3" json:"tcp_connections,omitempty"`
	UdpConnections   int32                  `protobuf:"varint,8,opt,name=udp_connections,json=udpConnections,proto3" json:"udp_connections,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ConnectionStats) Reset() {
	*x = ConnectionStats{}
	mi := &file_pkg_telemetry_v1_telemetry_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionStats) ProtoMessage() {}

func (x *ConnectionStats) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_telemetry_v1_telemetry_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionStats.ProtoReflect.Descriptor instead.
func (*ConnectionStats) Descriptor() ([]byte, []int) {
	return file_pkg_telemetry_v1_telemetry_proto_rawDescGZIP(), []int{3}
}

func (x *ConnectionStats) GetBucketTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BucketTime
	}
	return nil
}

func (x *ConnectionStats) GetTotalConnections() int64 {
	if x != nil {
		return x.TotalConnections
	}
	return 0
}

func (x *ConnectionStats) GetTotalBytesIn() int64 {
	if x != nil {
		return x.TotalBytesIn
	}
	return 0
}

func (x *ConnectionStats) GetTotalBytesOut() int64 {
	if x != nil {
		return x.TotalBytesOut
	}
	return 0
}

func (x *ConnectionStats) GetTotalPacketsIn() int64 {
	if x != nil {
		return x.TotalPacketsIn
	}
	return 0
}

func (x *ConnectionStats) GetTotalPacketsOut() int64 {
	if x != nil {
		return x.TotalPacketsOut
	}
	return 0
}

func (x *ConnectionStats) GetTcpConnections() int32 {
	if x != nil {
		return x.TcpConnections
	}
	return 0
}

func (x *ConnectionStats) GetUdpConnections() int32 {
	if x != nil {
		return x.UdpConnections
	}
	return 0
}

var File_pkg_telemetry_v1_telemetry_proto protoreflect.FileDescriptor

var file_pkg_telemetry_v1_telemetry_proto_rawDesc = string([]byte{
	0x0a, 0x20, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0c, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xff, 0x08, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x15, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x73, 0x72, 0x63, 0x49, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x64, 0x73, 0x74, 0x49, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x73, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x63, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x74, 0x63, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0b, 0x72, 0x65,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x72, 0x74, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x07, 0x72, 0x74, 0x74, 0x55, 0x73, 0x65, 0x63, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x03, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x75, 0x64, 0x70, 0x5f, 0x72, 0x78, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0c, 0x75, 0x64,
	0x70, 0x52, 0x78, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0e, 0x75, 0x64, 0x70, 0x5f, 0x74, 0x78, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0c, 0x75, 0x64, 0x70, 0x54, 0x78, 0x44, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x63, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x07, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x63, 0x74, 0x5f, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x06, 0x63, 0x74, 0x5a,
	0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x06, 0x63, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x1a, 0x0a, 0x06, 0x6e, 0x61, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x74, 0x49, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x6e, 0x61, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x0a, 0x52, 0x07, 0x6e, 0x61, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x62, 0x79, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x5f, 0x69, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x49, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f,
	0x6f, 0x75, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x12, 0x37, 0x0a, 0x09,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x53, 0x65, 0x65, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x74, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x74, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x63,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x72, 0x78, 0x5f, 0x64, 0x72, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x74, 0x78, 0x5f, 0x64,
	0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x74, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x6e, 0x61, 0x74, 0x5f, 0x69, 0x70, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6e, 0x61, 0x74, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x22, 0x6f, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x22, 0xc3, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf1, 0x02, 0x0a, 0x0f, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3b,
	0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x12, 0x26,
	0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x75,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x49, 0x6e,
	0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x74, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x64, 0x70, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x75, 0x64, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0xc1,
	0x01, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x43, 0x50, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x43, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x43, 0x50, 0x5f, 0x43, 0x4c,
	0x4f, 0x53, 0x45, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x44, 0x50, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x04, 0x12, 0x19, 0x0a,
	0x15, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x44, 0x50, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x44, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x10, 0x06, 0x32, 0xd0, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x24,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x22, 0x00, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x6f, 0x62, 0x62, 0x69, 0x6c, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x64,
	0x65, 0x67, 0x65, 0x6e, 0x2f, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_pkg_telemetry_v1_telemetry_proto_rawDescOnce sync.Once
	file_pkg_telemetry_v1_telemetry_proto_rawDescData []byte
)

func file_pkg_telemetry_v1_telemetry_proto_rawDescGZIP() []byte {
	file_pkg_telemetry_v1_telemetry_proto_rawDescOnce.Do(func() {
		file_pkg_telemetry_v1_telemetry_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkg_telemetry_v1_telemetry_proto_rawDesc), len(file_pkg_telemetry_v1_telemetry_proto_rawDesc)))
	})
	return file_pkg_telemetry_v1_telemetry_proto_rawDescData
}

var file_pkg_telemetry_v1_telemetry_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pkg_telemetry_v1_telemetry_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_pkg_telemetry_v1_telemetry_proto_goTypes = []any{
	(EventType)(0),                   // 0: telemetry.v1.EventType
	(*ConnectionEvent)(nil),          // 1: telemetry.v1.ConnectionEvent
	(*StreamConnectionsRequest)(nil), // 2: telemetry.v1.StreamConnectionsRequest
	(*ConnectionStatsRequest)(nil),   // 3: telemetry.v1.ConnectionStatsRequest
	(*ConnectionStats)(nil),          // 4: telemetry.v1.ConnectionStats
	(*timestamppb.Timestamp)(nil),    // 5: google.protobuf.Timestamp
}
var file_pkg_telemetry_v1_telemetry_proto_depIdxs = []int32{
	0, // 0: telemetry.v1.ConnectionEvent.event_type:type_name -> telemetry.v1.EventType
	5, // 1: telemetry.v1.ConnectionEvent.timestamp:type_name -> google.protobuf.Timestamp
	5, // 2: telemetry.v1.ConnectionEvent.start_ts:type_name -> google.protobuf.Timestamp
	5, // 3: telemetry.v1.ConnectionEvent.last_seen:type_name -> google.protobuf.Timestamp
	5, // 4: telemetry.v1.ConnectionStatsRequest.start_time:type_name -> google.protobuf.Timestamp
	5, // 5: telemetry.v1.ConnectionStatsRequest.end_time:type_name -> google.protobuf.Timestamp
	5, // 6: telemetry.v1.ConnectionStats.bucket_time:type_name -> google.protobuf.Timestamp
	2, // 7: telemetry.v1.ConnectionTracker.StreamConnections:input_type -> telemetry.v1.StreamConnectionsRequest
	3, // 8: telemetry.v1.ConnectionTracker.GetConnectionStats:input_type -> telemetry.v1.ConnectionStatsRequest
	1, // 9: telemetry.v1.ConnectionTracker.StreamConnections:output_type -> telemetry.v1.ConnectionEvent
	4, // 10: telemetry.v1.ConnectionTracker.GetConnectionStats:output_type -> telemetry.v1.ConnectionStats
	9, // [9:11] is the sub-list for method output_type
	7, // [7:9] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_pkg_telemetry_v1_telemetry_proto_init() }
func file_pkg_telemetry_v1_telemetry_proto_init() {
	if File_pkg_telemetry_v1_telemetry_proto != nil {
		return
	}
	file_pkg_telemetry_v1_telemetry_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_telemetry_v1_telemetry_proto_rawDesc), len(file_pkg_telemetry_v1_telemetry_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_telemetry_v1_telemetry_proto_goTypes,
		DependencyIndexes: file_pkg_telemetry_v1_telemetry_proto_depIdxs,
		EnumInfos:         file_pkg_telemetry_v1_telemetry_proto_enumTypes,
		MessageInfos:      file_pkg_telemetry_v1_telemetry_proto_msgTypes,
	}.Build()
	File_pkg_telemetry_v1_telemetry_proto = out.File
	file_pkg_telemetry_v1_telemetry_proto_goTypes = nil
	file_pkg_telemetry_v1_telemetry_proto_depIdxs = nil
}
