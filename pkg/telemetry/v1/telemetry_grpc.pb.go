// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: pkg/telemetry/v1/telemetry.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConnectionTracker_StreamConnections_FullMethodName  = "/telemetry.v1.ConnectionTracker/StreamConnections"
	ConnectionTracker_GetConnectionStats_FullMethodName = "/telemetry.v1.ConnectionTracker/GetConnectionStats"
)

// ConnectionTrackerClient is the client API for ConnectionTracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ConnectionTracker service provides methods to track network connections
type ConnectionTrackerClient interface {
	// StreamConnections streams active connections for a given namespace and pod
	StreamConnections(ctx context.Context, in *StreamConnectionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ConnectionEvent], error)
	// GetConnectionStats retrieves connection statistics for a given time range
	GetConnectionStats(ctx context.Context, in *ConnectionStatsRequest, opts ...grpc.CallOption) (*ConnectionStats, error)
}

type connectionTrackerClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectionTrackerClient(cc grpc.ClientConnInterface) ConnectionTrackerClient {
	return &connectionTrackerClient{cc}
}

func (c *connectionTrackerClient) StreamConnections(ctx context.Context, in *StreamConnectionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ConnectionEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ConnectionTracker_ServiceDesc.Streams[0], ConnectionTracker_StreamConnections_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamConnectionsRequest, ConnectionEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConnectionTracker_StreamConnectionsClient = grpc.ServerStreamingClient[ConnectionEvent]

func (c *connectionTrackerClient) GetConnectionStats(ctx context.Context, in *ConnectionStatsRequest, opts ...grpc.CallOption) (*ConnectionStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectionStats)
	err := c.cc.Invoke(ctx, ConnectionTracker_GetConnectionStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectionTrackerServer is the server API for ConnectionTracker service.
// All implementations must embed UnimplementedConnectionTrackerServer
// for forward compatibility.
//
// ConnectionTracker service provides methods to track network connections
type ConnectionTrackerServer interface {
	// StreamConnections streams active connections for a given namespace and pod
	StreamConnections(*StreamConnectionsRequest, grpc.ServerStreamingServer[ConnectionEvent]) error
	// GetConnectionStats retrieves connection statistics for a given time range
	GetConnectionStats(context.Context, *ConnectionStatsRequest) (*ConnectionStats, error)
	mustEmbedUnimplementedConnectionTrackerServer()
}

// UnimplementedConnectionTrackerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConnectionTrackerServer struct{}

func (UnimplementedConnectionTrackerServer) StreamConnections(*StreamConnectionsRequest, grpc.ServerStreamingServer[ConnectionEvent]) error {
	return status.Errorf(codes.Unimplemented, "method StreamConnections not implemented")
}
func (UnimplementedConnectionTrackerServer) GetConnectionStats(context.Context, *ConnectionStatsRequest) (*ConnectionStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectionStats not implemented")
}
func (UnimplementedConnectionTrackerServer) mustEmbedUnimplementedConnectionTrackerServer() {}
func (UnimplementedConnectionTrackerServer) testEmbeddedByValue()                           {}

// UnsafeConnectionTrackerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectionTrackerServer will
// result in compilation errors.
type UnsafeConnectionTrackerServer interface {
	mustEmbedUnimplementedConnectionTrackerServer()
}

func RegisterConnectionTrackerServer(s grpc.ServiceRegistrar, srv ConnectionTrackerServer) {
	// If the following call pancis, it indicates UnimplementedConnectionTrackerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConnectionTracker_ServiceDesc, srv)
}

func _ConnectionTracker_StreamConnections_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamConnectionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConnectionTrackerServer).StreamConnections(m, &grpc.GenericServerStream[StreamConnectionsRequest, ConnectionEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConnectionTracker_StreamConnectionsServer = grpc.ServerStreamingServer[ConnectionEvent]

func _ConnectionTracker_GetConnectionStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionTrackerServer).GetConnectionStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionTracker_GetConnectionStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionTrackerServer).GetConnectionStats(ctx, req.(*ConnectionStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectionTracker_ServiceDesc is the grpc.ServiceDesc for ConnectionTracker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectionTracker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "telemetry.v1.ConnectionTracker",
	HandlerType: (*ConnectionTrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConnectionStats",
			Handler:    _ConnectionTracker_GetConnectionStats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamConnections",
			Handler:       _ConnectionTracker_StreamConnections_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/telemetry/v1/telemetry.proto",
}
